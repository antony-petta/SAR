#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_AMG88xx.h>
#include <NewPing.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

const char* ssid = "M31";
const char* password = "12345678";

WiFiServer server(80);

// Define pins for motor control
#define MOTOR_PIN1 27
#define MOTOR_PIN2 14
#define MOTOR_PIN3 12
#define MOTOR_PIN4 13

// Define pins for sensors
#define I2C_SDA_PIN 21
#define I2C_SCL_PIN 22
#define TRIGGER_PIN 15 // Connect to the trigger pin of HC-SR04
#define ECHO_PIN 4     // Connect to the echo pin of HC-SR04
#define MIN_DISTANCE_TO_OBSTACLE 20

// Create instances of the NewPing (HC-SR04) and TinyGPS++ libraries
NewPing sonar(TRIGGER_PIN, ECHO_PIN);
TinyGPSPlus gps;

// Create a SoftwareSerial object to communicate with the GPS module
SoftwareSerial gpsSerial(16, 17); // RX, TX

// Create an instance of the AMG88xx library for temperature sensor
Adafruit_AMG88xx amg;

// Define array to store temperature values
float temperatureArray[8][8];

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600); // Initialize the GPS serial communication

  // Setup motors
  pinMode(MOTOR_PIN1, OUTPUT);
  pinMode(MOTOR_PIN2, OUTPUT);
  pinMode(MOTOR_PIN3, OUTPUT);
  pinMode(MOTOR_PIN4, OUTPUT);

  // Initialize I2C
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);

  // Initialize WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  server.begin();

  // Initialize AMG88xx sensor
  if (!amg.begin()) {
    Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
    //while (1);
  }
  else {
    Serial.println("AMG88xx sensor initialized.");
  }
}

void loop() {
  // Rotate 360 degrees for scanning
  rotateRobot360();

  // Check for human temperature
  bool humanDetected = scanForHumanTemperature();

  if (humanDetected) {
    stopRobot();
    delay(2000);
    
    avoidObstacle();
    moveForward();
  } else {
    Serial.println("No human temperature detected. Continuing scanning.");
    delay(1000); // Delay for stability
    stopRobot();
    delay(2000);
    moveForward();
    delay(2000);
    rotateRobot360();
   
  }

  // Check for obstacle
  

  // Update the GPS data
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      // If new GPS data is available, print it to Serial
      Serial.print("Latitude: ");
      Serial.println(gps.location.lat(), 6);
      Serial.print("Longitude: ");
      Serial.println(gps.location.lng(), 6);
    }
  }

  // Check for incoming clients
  WiFiClient client = server.available();
  if (client) {
    Serial.println("New Client.");
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            // Respond to HTTP request
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            client.print("GPS Location: ");
            client.print("Latitude:76.4003E ");
            client.print(gps.location.lat(), 6);
            client.print(", Longitude:10.2695N ");
            client.print(gps.location.lng(), 6);
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    // Close the connection
    client.stop();
    Serial.println("Client Disconnected.");
  }
}

bool scanForHumanTemperature() {
  bool humanDetected = false;  // Variable to store whether human temperature is detected

  // Read temperature and store it in the array
  readAndStoreTemperature();

  // Check temperature range for human presence
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (temperatureArray[row][col] >= 32 && temperatureArray[row][col] <= 36) {
        Serial.println("Human temperature detected!");
        humanDetected = true;
        return humanDetected; // If human temperature is detected, return immediately
      }
    }
  }
  return humanDetected;
}

void readAndStoreTemperature() {
  float pixels[AMG88xx_PIXEL_ARRAY_SIZE];
  amg.readPixels(pixels);

  // Copy temperature values to the temperatureArray
  for (int i = 0; i < AMG88xx_PIXEL_ARRAY_SIZE; i++) {
    int row = i / 8;
    int col = i % 8;
    temperatureArray[row][col] = pixels[i];
  }
}

void moveForward() {
  // Move forward
  digitalWrite(MOTOR_PIN1,HIGH);
  digitalWrite(MOTOR_PIN2, LOW);
  digitalWrite(MOTOR_PIN3, HIGH);
  digitalWrite(MOTOR_PIN4, LOW);
}

void stopRobot() {
  // Stop both motors
  digitalWrite(MOTOR_PIN1, LOW);
  digitalWrite(MOTOR_PIN2, LOW);
  digitalWrite(MOTOR_PIN3, LOW);
  digitalWrite(MOTOR_PIN4, LOW);
}

void avoidObstacle() {
  unsigned int distance = sonar.ping_cm(); // Send ping, get distance in cm and print result (0 = outside set distance range)

  // If an obstacle is detected within the minimum distance
  if (distance < MIN_DISTANCE_TO_OBSTACLE) {
    stopRobot();
    delay(2000); // Reverse for a certain amount of time
    rotateRobot360(); // Turn left
    delay(2000); // Wait for the turn to complete
   
  }
  
}

void rotateRobot360() {
  // Rotate the robot 360 degrees
  digitalWrite(MOTOR_PIN1, HIGH);
  digitalWrite(MOTOR_PIN2, LOW);
  digitalWrite(MOTOR_PIN3, LOW);
  digitalWrite(MOTOR_PIN4, HIGH);
}